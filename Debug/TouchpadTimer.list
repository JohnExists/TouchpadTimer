
TouchpadTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080034a0  080034a0  000044a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800352c  0800352c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  0800352c  0800352c  0000452c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003534  08003534  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003534  08003534  00004534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003538  08003538  00004538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800353c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000005c  08003598  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003598  0000521c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006da6  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191a  00000000  00000000  0000be32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0000d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000485  00000000  00000000  0000dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226e3  00000000  00000000  0000e205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000968e  00000000  00000000  000308e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d25ec  00000000  00000000  00039f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b28  00000000  00000000  0010c5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003488 	.word	0x08003488

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08003488 	.word	0x08003488

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	@ 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	3c01      	subs	r4, #1
 8000350:	bf28      	it	cs
 8000352:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000356:	d2e9      	bcs.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__aeabi_d2iz>:
 80009b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b8:	d215      	bcs.n	80009e6 <__aeabi_d2iz+0x36>
 80009ba:	d511      	bpl.n	80009e0 <__aeabi_d2iz+0x30>
 80009bc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c4:	d912      	bls.n	80009ec <__aeabi_d2iz+0x3c>
 80009c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	bf18      	it	ne
 80009dc:	4240      	negne	r0, r0
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d105      	bne.n	80009f8 <__aeabi_d2iz+0x48>
 80009ec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f0:	bf08      	it	eq
 80009f2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_uldivmod>:
 8000a00:	b953      	cbnz	r3, 8000a18 <__aeabi_uldivmod+0x18>
 8000a02:	b94a      	cbnz	r2, 8000a18 <__aeabi_uldivmod+0x18>
 8000a04:	2900      	cmp	r1, #0
 8000a06:	bf08      	it	eq
 8000a08:	2800      	cmpeq	r0, #0
 8000a0a:	bf1c      	itt	ne
 8000a0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a10:	f04f 30ff 	movne.w	r0, #4294967295
 8000a14:	f000 b96a 	b.w	8000cec <__aeabi_idiv0>
 8000a18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a20:	f000 f806 	bl	8000a30 <__udivmoddi4>
 8000a24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a2c:	b004      	add	sp, #16
 8000a2e:	4770      	bx	lr

08000a30 <__udivmoddi4>:
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a34:	9d08      	ldr	r5, [sp, #32]
 8000a36:	460c      	mov	r4, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14e      	bne.n	8000ada <__udivmoddi4+0xaa>
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	458c      	cmp	ip, r1
 8000a40:	4686      	mov	lr, r0
 8000a42:	fab2 f282 	clz	r2, r2
 8000a46:	d962      	bls.n	8000b0e <__udivmoddi4+0xde>
 8000a48:	b14a      	cbz	r2, 8000a5e <__udivmoddi4+0x2e>
 8000a4a:	f1c2 0320 	rsb	r3, r2, #32
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	fa20 f303 	lsr.w	r3, r0, r3
 8000a54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a58:	4319      	orrs	r1, r3
 8000a5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a62:	fa1f f68c 	uxth.w	r6, ip
 8000a66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb04 f106 	mul.w	r1, r4, r6
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d90a      	bls.n	8000a94 <__udivmoddi4+0x64>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a86:	f080 8112 	bcs.w	8000cae <__udivmoddi4+0x27e>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 810f 	bls.w	8000cae <__udivmoddi4+0x27e>
 8000a90:	3c02      	subs	r4, #2
 8000a92:	4463      	add	r3, ip
 8000a94:	1a59      	subs	r1, r3, r1
 8000a96:	fa1f f38e 	uxth.w	r3, lr
 8000a9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa6:	fb00 f606 	mul.w	r6, r0, r6
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x94>
 8000aae:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ab6:	f080 80fc 	bcs.w	8000cb2 <__udivmoddi4+0x282>
 8000aba:	429e      	cmp	r6, r3
 8000abc:	f240 80f9 	bls.w	8000cb2 <__udivmoddi4+0x282>
 8000ac0:	4463      	add	r3, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11d      	cbz	r5, 8000ad6 <__udivmoddi4+0xa6>
 8000ace:	40d3      	lsrs	r3, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d905      	bls.n	8000aea <__udivmoddi4+0xba>
 8000ade:	b10d      	cbz	r5, 8000ae4 <__udivmoddi4+0xb4>
 8000ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e7f5      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d146      	bne.n	8000b80 <__udivmoddi4+0x150>
 8000af2:	42a3      	cmp	r3, r4
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xcc>
 8000af6:	4290      	cmp	r0, r2
 8000af8:	f0c0 80f0 	bcc.w	8000cdc <__udivmoddi4+0x2ac>
 8000afc:	1a86      	subs	r6, r0, r2
 8000afe:	eb64 0303 	sbc.w	r3, r4, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d0e6      	beq.n	8000ad6 <__udivmoddi4+0xa6>
 8000b08:	e9c5 6300 	strd	r6, r3, [r5]
 8000b0c:	e7e3      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x204>
 8000b14:	eba1 040c 	sub.w	r4, r1, ip
 8000b18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	2101      	movs	r1, #1
 8000b22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b32:	fb07 f006 	mul.w	r0, r7, r6
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x11c>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x11a>
 8000b44:	4298      	cmp	r0, r3
 8000b46:	f200 80cd 	bhi.w	8000ce4 <__udivmoddi4+0x2b4>
 8000b4a:	4626      	mov	r6, r4
 8000b4c:	1a1c      	subs	r4, r3, r0
 8000b4e:	fa1f f38e 	uxth.w	r3, lr
 8000b52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b56:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5e:	fb00 f707 	mul.w	r7, r0, r7
 8000b62:	429f      	cmp	r7, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x148>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x146>
 8000b70:	429f      	cmp	r7, r3
 8000b72:	f200 80b0 	bhi.w	8000cd6 <__udivmoddi4+0x2a6>
 8000b76:	4620      	mov	r0, r4
 8000b78:	1bdb      	subs	r3, r3, r7
 8000b7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7e:	e7a5      	b.n	8000acc <__udivmoddi4+0x9c>
 8000b80:	f1c1 0620 	rsb	r6, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b90:	fa04 f301 	lsl.w	r3, r4, r1
 8000b94:	ea43 030c 	orr.w	r3, r3, ip
 8000b98:	40f4      	lsrs	r4, r6
 8000b9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9e:	0c38      	lsrs	r0, r7, #16
 8000ba0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ba8:	fa1f fc87 	uxth.w	ip, r7
 8000bac:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000bb8:	45a1      	cmp	r9, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x1a6>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bc6:	f080 8084 	bcs.w	8000cd2 <__udivmoddi4+0x2a2>
 8000bca:	45a1      	cmp	r9, r4
 8000bcc:	f240 8081 	bls.w	8000cd2 <__udivmoddi4+0x2a2>
 8000bd0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd4:	443c      	add	r4, r7
 8000bd6:	eba4 0409 	sub.w	r4, r4, r9
 8000bda:	fa1f f983 	uxth.w	r9, r3
 8000bde:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be2:	fb00 4413 	mls	r4, r0, r3, r4
 8000be6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x1d2>
 8000bf2:	193c      	adds	r4, r7, r4
 8000bf4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bf8:	d267      	bcs.n	8000cca <__udivmoddi4+0x29a>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0x29a>
 8000bfe:	3b02      	subs	r3, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c06:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0a:	eba4 040c 	sub.w	r4, r4, ip
 8000c0e:	429c      	cmp	r4, r3
 8000c10:	46ce      	mov	lr, r9
 8000c12:	469c      	mov	ip, r3
 8000c14:	d351      	bcc.n	8000cba <__udivmoddi4+0x28a>
 8000c16:	d04e      	beq.n	8000cb6 <__udivmoddi4+0x286>
 8000c18:	b155      	cbz	r5, 8000c30 <__udivmoddi4+0x200>
 8000c1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c22:	fa04 f606 	lsl.w	r6, r4, r6
 8000c26:	40cb      	lsrs	r3, r1
 8000c28:	431e      	orrs	r6, r3
 8000c2a:	40cc      	lsrs	r4, r1
 8000c2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	e750      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f103 	lsr.w	r1, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	fa24 f303 	lsr.w	r3, r4, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	430c      	orrs	r4, r1
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c50:	fa1f f78c 	uxth.w	r7, ip
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3110 	mls	r1, r8, r0, r3
 8000c5c:	0c23      	lsrs	r3, r4, #16
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f107 	mul.w	r1, r0, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x24c>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c72:	d22c      	bcs.n	8000cce <__udivmoddi4+0x29e>
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d92a      	bls.n	8000cce <__udivmoddi4+0x29e>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c84:	fb08 3311 	mls	r3, r8, r1, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb01 f307 	mul.w	r3, r1, r7
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x276>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c9c:	d213      	bcs.n	8000cc6 <__udivmoddi4+0x296>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d911      	bls.n	8000cc6 <__udivmoddi4+0x296>
 8000ca2:	3902      	subs	r1, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	1ae4      	subs	r4, r4, r3
 8000ca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cac:	e739      	b.n	8000b22 <__udivmoddi4+0xf2>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	e6f0      	b.n	8000a94 <__udivmoddi4+0x64>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e706      	b.n	8000ac4 <__udivmoddi4+0x94>
 8000cb6:	45c8      	cmp	r8, r9
 8000cb8:	d2ae      	bcs.n	8000c18 <__udivmoddi4+0x1e8>
 8000cba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e7a8      	b.n	8000c18 <__udivmoddi4+0x1e8>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	e7ed      	b.n	8000ca6 <__udivmoddi4+0x276>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	e799      	b.n	8000c02 <__udivmoddi4+0x1d2>
 8000cce:	4630      	mov	r0, r6
 8000cd0:	e7d4      	b.n	8000c7c <__udivmoddi4+0x24c>
 8000cd2:	46d6      	mov	lr, sl
 8000cd4:	e77f      	b.n	8000bd6 <__udivmoddi4+0x1a6>
 8000cd6:	4463      	add	r3, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	e74d      	b.n	8000b78 <__udivmoddi4+0x148>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	4623      	mov	r3, r4
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	e70f      	b.n	8000b04 <__udivmoddi4+0xd4>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	e730      	b.n	8000b4c <__udivmoddi4+0x11c>
 8000cea:	bf00      	nop

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <launchTimer>:

inline bool isBuzzerEnabled = FALSE;
inline Timer timer;

void launchTimer(ADC_HandleTypeDef* hadc1)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	@ 0x30
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	  uint32_t channels[3] = {ADC_CHANNEL_0, ADC_CHANNEL_1, ADC_CHANNEL_4 };
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <launchTimer+0x7c>)
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  uint8_t numChannels = sizeof(channels) / sizeof(uint32_t);
 8000d04:	2303      	movs	r3, #3
 8000d06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  Touchpad pad = initTouchpad(hadc1, numChannels, channels);
 8000d0a:	f107 000c 	add.w	r0, r7, #12
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f000 f996 	bl	8001048 <initTouchpad>

	  timer.currentSelectedValue = 1;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <launchTimer+0x80>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
	  timer.isEnabled = FALSE;
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <launchTimer+0x80>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	705a      	strb	r2, [r3, #1]
	  timer.endTime = -1;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <launchTimer+0x80>)
 8000d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2e:	605a      	str	r2, [r3, #4]

	  while (1)
	  {
		  updateTouchpad(&pad);
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f9d1 	bl	80010dc <updateTouchpad>
		  updateTimer(&timer);
 8000d3a:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <launchTimer+0x80>)
 8000d3c:	f000 f81e 	bl	8000d7c <updateTimer>

		  if(isBuzzerEnabled)
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <launchTimer+0x84>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f3      	beq.n	8000d30 <launchTimer+0x40>
		  {
			  HAL_GPIO_WritePin(BUZZER_PIN_TYPE, BUZZER_PIN_NUMBER, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2180      	movs	r1, #128	@ 0x80
 8000d4c:	480a      	ldr	r0, [pc, #40]	@ (8000d78 <launchTimer+0x88>)
 8000d4e:	f001 fcb9 	bl	80026c4 <HAL_GPIO_WritePin>
			  HAL_Delay(50);
 8000d52:	2032      	movs	r0, #50	@ 0x32
 8000d54:	f000 fe08 	bl	8001968 <HAL_Delay>
			  HAL_GPIO_WritePin(BUZZER_PIN_TYPE, BUZZER_PIN_NUMBER, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2180      	movs	r1, #128	@ 0x80
 8000d5c:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <launchTimer+0x88>)
 8000d5e:	f001 fcb1 	bl	80026c4 <HAL_GPIO_WritePin>
			  isBuzzerEnabled = FALSE;
 8000d62:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <launchTimer+0x84>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
		  updateTouchpad(&pad);
 8000d68:	e7e2      	b.n	8000d30 <launchTimer+0x40>
 8000d6a:	bf00      	nop
 8000d6c:	080034a0 	.word	0x080034a0
 8000d70:	2000007c 	.word	0x2000007c
 8000d74:	20000078 	.word	0x20000078
 8000d78:	40020400 	.word	0x40020400

08000d7c <updateTimer>:
		  }
	  }
}

void updateTimer(Timer* timer)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	  if(!timer->isEnabled)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	785b      	ldrb	r3, [r3, #1]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10a      	bne.n	8000da2 <updateTimer+0x26>
	  {
		  Active_Seven_Segment(timer->currentSelectedValue);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 f92b 	bl	8000fec <Active_Seven_Segment>
		  HAL_GPIO_WritePin(LED_PIN_TYPE, LED_PIN_NUMBER, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d9c:	4829      	ldr	r0, [pc, #164]	@ (8000e44 <updateTimer+0xc8>)
 8000d9e:	f001 fc91 	bl	80026c4 <HAL_GPIO_WritePin>
	  }
	  if(timer->isEnabled)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	785b      	ldrb	r3, [r3, #1]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d047      	beq.n	8000e3a <updateTimer+0xbe>
	  {
		  // Turns on LED when timer is active
		  HAL_GPIO_WritePin(LED_PIN_TYPE, LED_PIN_NUMBER, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db0:	4824      	ldr	r0, [pc, #144]	@ (8000e44 <updateTimer+0xc8>)
 8000db2:	f001 fc87 	bl	80026c4 <HAL_GPIO_WritePin>
		  int timeLeft = timer->endTime - HAL_GetTick();
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685c      	ldr	r4, [r3, #4]
 8000dba:	f000 fdc9 	bl	8001950 <HAL_GetTick>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	1ae3      	subs	r3, r4, r3
 8000dc2:	60bb      	str	r3, [r7, #8]
		  // Displays time left on seven segment display
		  Active_Seven_Segment((int)(timeLeft / 1000.0));
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f7ff fb77 	bl	80004b8 <__aeabi_i2d>
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <updateTimer+0xcc>)
 8000dd0:	f7ff fd06 	bl	80007e0 <__aeabi_ddiv>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f7ff fde8 	bl	80009b0 <__aeabi_d2iz>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f902 	bl	8000fec <Active_Seven_Segment>

		  // When the timer ends, turns on the buzzer and disables timer
		  if(timeLeft <= 0)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dc25      	bgt.n	8000e3a <updateTimer+0xbe>
		  {
			  for(int i = 0; i < 3; ++i)
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e01c      	b.n	8000e2e <updateTimer+0xb2>
			  {
				  HAL_GPIO_WritePin(BUZZER_PIN_TYPE, BUZZER_PIN_NUMBER, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2180      	movs	r1, #128	@ 0x80
 8000df8:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <updateTimer+0xc8>)
 8000dfa:	f001 fc63 	bl	80026c4 <HAL_GPIO_WritePin>
				  HAL_GPIO_TogglePin(LED_PIN_TYPE, LED_PIN_NUMBER);
 8000dfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e02:	4810      	ldr	r0, [pc, #64]	@ (8000e44 <updateTimer+0xc8>)
 8000e04:	f001 fc77 	bl	80026f6 <HAL_GPIO_TogglePin>
				  HAL_Delay(250);
 8000e08:	20fa      	movs	r0, #250	@ 0xfa
 8000e0a:	f000 fdad 	bl	8001968 <HAL_Delay>
				  HAL_GPIO_WritePin(BUZZER_PIN_TYPE, BUZZER_PIN_NUMBER, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <updateTimer+0xc8>)
 8000e14:	f001 fc56 	bl	80026c4 <HAL_GPIO_WritePin>
				  HAL_GPIO_TogglePin(LED_PIN_TYPE, LED_PIN_NUMBER);
 8000e18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <updateTimer+0xc8>)
 8000e1e:	f001 fc6a 	bl	80026f6 <HAL_GPIO_TogglePin>
				  HAL_Delay(250);
 8000e22:	20fa      	movs	r0, #250	@ 0xfa
 8000e24:	f000 fda0 	bl	8001968 <HAL_Delay>
			  for(int i = 0; i < 3; ++i)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	dddf      	ble.n	8000df4 <updateTimer+0x78>
			  }
			  timer->isEnabled = FALSE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	705a      	strb	r2, [r3, #1]
		  }
	  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd90      	pop	{r4, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40020400 	.word	0x40020400
 8000e48:	408f4000 	.word	0x408f4000

08000e4c <ButtonReleasedEvent>:



void ButtonReleasedEvent(uint8_t buttonReleased)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	  isBuzzerEnabled = TRUE;
 8000e56:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <ButtonReleasedEvent+0x20>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
	  useTimer(buttonReleased);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f806 	bl	8000e70 <useTimer>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000078 	.word	0x20000078

08000e70 <useTimer>:


void useTimer(int action)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	switch (action) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d031      	beq.n	8000ee2 <useTimer+0x72>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	dc3e      	bgt.n	8000f02 <useTimer+0x92>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <useTimer+0x22>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d01d      	beq.n	8000ecc <useTimer+0x5c>
			break;
		case 2:
			  if(timer.currentSelectedValue > 1) timer.currentSelectedValue--;
			break;
	}
}
 8000e90:	e037      	b.n	8000f02 <useTimer+0x92>
			  if(timer.isEnabled)
 8000e92:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <useTimer+0x9c>)
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <useTimer+0x32>
				  timer.isEnabled = FALSE;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <useTimer+0x9c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	705a      	strb	r2, [r3, #1]
			break;
 8000ea0:	e02a      	b.n	8000ef8 <useTimer+0x88>
			  } else if (!timer.isEnabled) {
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <useTimer+0x9c>)
 8000ea4:	785b      	ldrb	r3, [r3, #1]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d126      	bne.n	8000ef8 <useTimer+0x88>
				  timer.isEnabled = TRUE;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <useTimer+0x9c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	705a      	strb	r2, [r3, #1]
				  timer.endTime = HAL_GetTick() + (timer.currentSelectedValue * 1000);
 8000eb0:	f000 fd4e 	bl	8001950 <HAL_GetTick>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a15      	ldr	r2, [pc, #84]	@ (8000f0c <useTimer+0x9c>)
 8000eb8:	7812      	ldrb	r2, [r2, #0]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ec0:	fb01 f202 	mul.w	r2, r1, r2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a11      	ldr	r2, [pc, #68]	@ (8000f0c <useTimer+0x9c>)
 8000ec8:	6053      	str	r3, [r2, #4]
			break;
 8000eca:	e015      	b.n	8000ef8 <useTimer+0x88>
			  if(timer.currentSelectedValue < 9) timer.currentSelectedValue++;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <useTimer+0x9c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d813      	bhi.n	8000efc <useTimer+0x8c>
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <useTimer+0x9c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <useTimer+0x9c>)
 8000ede:	701a      	strb	r2, [r3, #0]
			break;
 8000ee0:	e00c      	b.n	8000efc <useTimer+0x8c>
			  if(timer.currentSelectedValue > 1) timer.currentSelectedValue--;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <useTimer+0x9c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d90a      	bls.n	8000f00 <useTimer+0x90>
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <useTimer+0x9c>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <useTimer+0x9c>)
 8000ef4:	701a      	strb	r2, [r3, #0]
			break;
 8000ef6:	e003      	b.n	8000f00 <useTimer+0x90>
			break;
 8000ef8:	bf00      	nop
 8000efa:	e002      	b.n	8000f02 <useTimer+0x92>
			break;
 8000efc:	bf00      	nop
 8000efe:	e000      	b.n	8000f02 <useTimer+0x92>
			break;
 8000f00:	bf00      	nop
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000007c 	.word	0x2000007c

08000f10 <Set_Seven_Segment_Pin>:
 * @param letters A string containing the segment labels to set from a-f (e.g., "abc").
 * @param state The desired state of the segments (GPIO_PIN_SET or GPIO_PIN_RESET).
 *
 */
void Set_Seven_Segment_Pin(const char* letters, uint16_t state)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < (int)strlen(letters); ++i)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e055      	b.n	8000fce <Set_Seven_Segment_Pin+0xbe>
	{
		char it = letters[i];
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	72fb      	strb	r3, [r7, #11]

		switch (it) {
 8000f2c:	7afb      	ldrb	r3, [r7, #11]
 8000f2e:	3b61      	subs	r3, #97	@ 0x61
 8000f30:	2b06      	cmp	r3, #6
 8000f32:	d849      	bhi.n	8000fc8 <Set_Seven_Segment_Pin+0xb8>
 8000f34:	a201      	add	r2, pc, #4	@ (adr r2, 8000f3c <Set_Seven_Segment_Pin+0x2c>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f59 	.word	0x08000f59
 8000f40:	08000f69 	.word	0x08000f69
 8000f44:	08000f79 	.word	0x08000f79
 8000f48:	08000f89 	.word	0x08000f89
 8000f4c:	08000f99 	.word	0x08000f99
 8000f50:	08000fa9 	.word	0x08000fa9
 8000f54:	08000fb9 	.word	0x08000fb9
			case 'a':
				HAL_GPIO_WritePin(SEGMENT_A_PIN_TYPE, SEGMENT_A_PIN_NUMBER, state);
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4821      	ldr	r0, [pc, #132]	@ (8000fe8 <Set_Seven_Segment_Pin+0xd8>)
 8000f62:	f001 fbaf 	bl	80026c4 <HAL_GPIO_WritePin>
				break;
 8000f66:	e02f      	b.n	8000fc8 <Set_Seven_Segment_Pin+0xb8>
			case 'b':
				HAL_GPIO_WritePin(SEGMENT_B_PIN_TYPE, SEGMENT_B_PIN_NUMBER, state);
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2102      	movs	r1, #2
 8000f70:	481d      	ldr	r0, [pc, #116]	@ (8000fe8 <Set_Seven_Segment_Pin+0xd8>)
 8000f72:	f001 fba7 	bl	80026c4 <HAL_GPIO_WritePin>
				break;
 8000f76:	e027      	b.n	8000fc8 <Set_Seven_Segment_Pin+0xb8>
			case 'c':
				HAL_GPIO_WritePin(SEGMENT_C_PIN_TYPE, SEGMENT_C_PIN_NUMBER, state);
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4819      	ldr	r0, [pc, #100]	@ (8000fe8 <Set_Seven_Segment_Pin+0xd8>)
 8000f82:	f001 fb9f 	bl	80026c4 <HAL_GPIO_WritePin>
				break;
 8000f86:	e01f      	b.n	8000fc8 <Set_Seven_Segment_Pin+0xb8>
			case 'd':
				HAL_GPIO_WritePin(SEGMENT_D_PIN_TYPE, SEGMENT_D_PIN_NUMBER, state);
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2108      	movs	r1, #8
 8000f90:	4815      	ldr	r0, [pc, #84]	@ (8000fe8 <Set_Seven_Segment_Pin+0xd8>)
 8000f92:	f001 fb97 	bl	80026c4 <HAL_GPIO_WritePin>
				break;
 8000f96:	e017      	b.n	8000fc8 <Set_Seven_Segment_Pin+0xb8>
			case 'e':
				HAL_GPIO_WritePin(SEGMENT_E_PIN_TYPE, SEGMENT_E_PIN_NUMBER, state);
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <Set_Seven_Segment_Pin+0xd8>)
 8000fa2:	f001 fb8f 	bl	80026c4 <HAL_GPIO_WritePin>
				break;
 8000fa6:	e00f      	b.n	8000fc8 <Set_Seven_Segment_Pin+0xb8>
			case 'f':
				HAL_GPIO_WritePin(SEGMENT_F_PIN_TYPE, SEGMENT_F_PIN_NUMBER, state);
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	2120      	movs	r1, #32
 8000fb0:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <Set_Seven_Segment_Pin+0xd8>)
 8000fb2:	f001 fb87 	bl	80026c4 <HAL_GPIO_WritePin>
				break;
 8000fb6:	e007      	b.n	8000fc8 <Set_Seven_Segment_Pin+0xb8>
			case 'g':
				HAL_GPIO_WritePin(SEGMENT_G_PIN_TYPE, SEGMENT_G_PIN_NUMBER, state);
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2140      	movs	r1, #64	@ 0x40
 8000fc0:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <Set_Seven_Segment_Pin+0xd8>)
 8000fc2:	f001 fb7f 	bl	80026c4 <HAL_GPIO_WritePin>
				break;
 8000fc6:	bf00      	nop
	for(int i = 0; i < (int)strlen(letters); ++i)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff f918 	bl	8000204 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	dba1      	blt.n	8000f22 <Set_Seven_Segment_Pin+0x12>
		}
	}
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40020400 	.word	0x40020400

08000fec <Active_Seven_Segment>:
 *
 * @param number The number to display on the seven-segment display (0 to 9).
 *
 */
void Active_Seven_Segment(int number)
{
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b08c      	sub	sp, #48	@ 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	if(number > 9 || number < 0) return;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b09      	cmp	r3, #9
 8000ff8:	dc1d      	bgt.n	8001036 <Active_Seven_Segment+0x4a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db1a      	blt.n	8001036 <Active_Seven_Segment+0x4a>

	const char* numericArangements[10] = {"abcdef", "bc", "abged", "abgcd", "fgbc",
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <Active_Seven_Segment+0x54>)
 8001002:	f107 0408 	add.w	r4, r7, #8
 8001006:	461d      	mov	r5, r3
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001014:	e884 0003 	stmia.w	r4, {r0, r1}
			"afgcd", "afgcde", "abc", "abcdefg", "abcdgf"};


	// Switches all the segment lights off
	Set_Seven_Segment_Pin("abcdefg", GPIO_PIN_RESET);
 8001018:	2100      	movs	r1, #0
 800101a:	480a      	ldr	r0, [pc, #40]	@ (8001044 <Active_Seven_Segment+0x58>)
 800101c:	f7ff ff78 	bl	8000f10 <Set_Seven_Segment_Pin>

	// Turns on the pins for the correct number
	Set_Seven_Segment_Pin(numericArangements[number], GPIO_PIN_SET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	3330      	adds	r3, #48	@ 0x30
 8001026:	443b      	add	r3, r7
 8001028:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800102c:	2101      	movs	r1, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff6e 	bl	8000f10 <Set_Seven_Segment_Pin>
 8001034:	e000      	b.n	8001038 <Active_Seven_Segment+0x4c>
	if(number > 9 || number < 0) return;
 8001036:	bf00      	nop

}
 8001038:	3730      	adds	r7, #48	@ 0x30
 800103a:	46bd      	mov	sp, r7
 800103c:	bdb0      	pop	{r4, r5, r7, pc}
 800103e:	bf00      	nop
 8001040:	080034f4 	.word	0x080034f4
 8001044:	080034ac 	.word	0x080034ac

08001048 <initTouchpad>:
#include "Touchpad.h"


Touchpad initTouchpad(ADC_HandleTypeDef* hadc1, uint8_t numChannels,  uint32_t channels[])
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	4613      	mov	r3, r2
 8001056:	71fb      	strb	r3, [r7, #7]
	Touchpad pad;
	pad.hadc1 = hadc1;
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	613b      	str	r3, [r7, #16]
	pad.numChannels = numChannels;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f887 3020 	strb.w	r3, [r7, #32]
	pad.channels = malloc(sizeof(uint32_t) * numChannels);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f002 f914 	bl	8003294 <malloc>
 800106c:	4603      	mov	r3, r0
 800106e:	617b      	str	r3, [r7, #20]
	pad.results = malloc(sizeof(bool) * numChannels);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4618      	mov	r0, r3
 8001074:	f002 f90e 	bl	8003294 <malloc>
 8001078:	4603      	mov	r3, r0
 800107a:	61bb      	str	r3, [r7, #24]
	pad.prevResults = malloc(sizeof(bool) * numChannels);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4618      	mov	r0, r3
 8001080:	f002 f908 	bl	8003294 <malloc>
 8001084:	4603      	mov	r3, r0
 8001086:	61fb      	str	r3, [r7, #28]

	for(int i = 0; i < numChannels; ++i)
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
 800108c:	e016      	b.n	80010bc <initTouchpad+0x74>
	{
		pad.results[i] = 0;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001092:	4413      	add	r3, r2
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		pad.prevResults[i] = 0;
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	4413      	add	r3, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		pad.channels[i] = channels[i];
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	441a      	add	r2, r3
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < numChannels; ++i)
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	3301      	adds	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbe4      	blt.n	800108e <initTouchpad+0x46>
	}

	return pad;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	461d      	mov	r5, r3
 80010c8:	f107 0410 	add.w	r4, r7, #16
 80010cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	602b      	str	r3, [r5, #0]
}
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bdb0      	pop	{r4, r5, r7, pc}

080010dc <updateTouchpad>:

void updateTouchpad(Touchpad* pad)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	  checkTouchpad(pad);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f82d 	bl	8001144 <checkTouchpad>

	  for(int i = 0; i < pad->numChannels; ++i)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e015      	b.n	800111c <updateTouchpad+0x40>
	  {
		  if(pad->prevResults[i] == TRUE && pad->results[i] == FALSE) ButtonReleasedEvent(i);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d10b      	bne.n	8001116 <updateTouchpad+0x3a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <updateTouchpad+0x3a>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fe9b 	bl	8000e4c <ButtonReleasedEvent>
	  for(int i = 0; i < pad->numChannels; ++i)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3301      	adds	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7c1b      	ldrb	r3, [r3, #16]
 8001120:	461a      	mov	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4293      	cmp	r3, r2
 8001126:	dbe3      	blt.n	80010f0 <updateTouchpad+0x14>
	  }

	  cpyArray(pad->numChannels, pad->results, pad->prevResults);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7c1b      	ldrb	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6899      	ldr	r1, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	461a      	mov	r2, r3
 8001138:	f000 f8ec 	bl	8001314 <cpyArray>
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <checkTouchpad>:

void checkTouchpad(Touchpad* pad)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	  const float TOLERANCE = 0.25;
 800114c:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8001150:	60fb      	str	r3, [r7, #12]
	  const float MAX_CYCLES = 80.0;
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <checkTouchpad+0x30>)
 8001154:	60bb      	str	r3, [r7, #8]
	  checkTouchpadA(TOLERANCE, MAX_CYCLES, pad);
 8001156:	edd7 7a02 	vldr	s15, [r7, #8]
 800115a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	ee17 0a90 	vmov	r0, s15
 8001164:	ed97 0a03 	vldr	s0, [r7, #12]
 8001168:	f000 f806 	bl	8001178 <checkTouchpadA>
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	42a00000 	.word	0x42a00000

08001178 <checkTouchpadA>:


void checkTouchpadA(float tolerance, int maxCycles, Touchpad* pad)
{
 8001178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800117c:	b08f      	sub	sp, #60	@ 0x3c
 800117e:	af00      	add	r7, sp, #0
 8001180:	ed87 0a03 	vstr	s0, [r7, #12]
 8001184:	60b8      	str	r0, [r7, #8]
 8001186:	6079      	str	r1, [r7, #4]
 8001188:	466b      	mov	r3, sp
 800118a:	461e      	mov	r6, r3
	size_t numChannels = pad->numChannels;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7c1b      	ldrb	r3, [r3, #16]
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* channels = pad->channels;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	623b      	str	r3, [r7, #32]
	uint8_t* results = pad->results;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	61fb      	str	r3, [r7, #28]

	const int HIGH = 3500;
 800119e:	f640 53ac 	movw	r3, #3500	@ 0xdac
 80011a2:	61bb      	str	r3, [r7, #24]
	// Counts the number of times a touch pad returns an
	// analog value greater than HIGH
	uint32_t High_ADC_Count[numChannels];
 80011a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011a6:	460b      	mov	r3, r1
 80011a8:	3b01      	subs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	2300      	movs	r3, #0
 80011ae:	4688      	mov	r8, r1
 80011b0:	4699      	mov	r9, r3
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80011be:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80011c2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80011c6:	2300      	movs	r3, #0
 80011c8:	460c      	mov	r4, r1
 80011ca:	461d      	mov	r5, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	016b      	lsls	r3, r5, #5
 80011d6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80011da:	0162      	lsls	r2, r4, #5
 80011dc:	008b      	lsls	r3, r1, #2
 80011de:	3307      	adds	r3, #7
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	ebad 0d03 	sub.w	sp, sp, r3
 80011e8:	466b      	mov	r3, sp
 80011ea:	3303      	adds	r3, #3
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < numChannels; ++i) High_ADC_Count[i] = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80011f6:	e007      	b.n	8001208 <checkTouchpadA+0x90>
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011fc:	2100      	movs	r1, #0
 80011fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001204:	3301      	adds	r3, #1
 8001206:	637b      	str	r3, [r7, #52]	@ 0x34
 8001208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f3      	bhi.n	80011f8 <checkTouchpadA+0x80>

	// Runs through X number of cycles to count the number of HIGHs
	for(int i = 0; i < maxCycles; ++i)
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
 8001214:	e024      	b.n	8001260 <checkTouchpadA+0xe8>
	{
		  for(int i = 0 ; i < numChannels; ++i)
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800121a:	e01a      	b.n	8001252 <checkTouchpadA+0xda>
		  {
			  if(getADCVal(pad, channels[i]) <= HIGH) continue;
 800121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	6a3a      	ldr	r2, [r7, #32]
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f84d 	bl	80012c8 <getADCVal>
 800122e:	4602      	mov	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	429a      	cmp	r2, r3
 8001234:	d909      	bls.n	800124a <checkTouchpadA+0xd2>
			  High_ADC_Count[i] = High_ADC_Count[i] + 1;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800123a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123e:	1c59      	adds	r1, r3, #1
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001248:	e000      	b.n	800124c <checkTouchpadA+0xd4>
			  if(getADCVal(pad, channels[i]) <= HIGH) continue;
 800124a:	bf00      	nop
		  for(int i = 0 ; i < numChannels; ++i)
 800124c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124e:	3301      	adds	r3, #1
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001256:	429a      	cmp	r2, r3
 8001258:	d8e0      	bhi.n	800121c <checkTouchpadA+0xa4>
	for(int i = 0; i < maxCycles; ++i)
 800125a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800125c:	3301      	adds	r3, #1
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbd6      	blt.n	8001216 <checkTouchpadA+0x9e>
		  }
	}

	for(int i = 0; i < numChannels; ++i)
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800126c:	e022      	b.n	80012b4 <checkTouchpadA+0x13c>
	{
		if(High_ADC_Count[i] > (uint8_t)(maxCycles * tolerance)) results[i] = 1;
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	ee07 2a90 	vmov	s15, r2
 800127c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001280:	edd7 7a03 	vldr	s15, [r7, #12]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800128c:	edc7 7a00 	vstr	s15, [r7]
 8001290:	783a      	ldrb	r2, [r7, #0]
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	4293      	cmp	r3, r2
 8001296:	d905      	bls.n	80012a4 <checkTouchpadA+0x12c>
 8001298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	4413      	add	r3, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e004      	b.n	80012ae <checkTouchpadA+0x136>
		else results[i] = 0;
 80012a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < numChannels; ++i)
 80012ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b0:	3301      	adds	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8d8      	bhi.n	800126e <checkTouchpadA+0xf6>
 80012bc:	46b5      	mov	sp, r6
	}
}
 80012be:	bf00      	nop
 80012c0:	373c      	adds	r7, #60	@ 0x3c
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012c8 <getADCVal>:

uint32_t getADCVal(Touchpad* pad, uint32_t channel)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	  uint32_t result = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
	  OpenChannel(pad, channel);
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f83a 	bl	8001352 <OpenChannel>
	  HAL_ADC_Start(pad->hadc1);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fba8 	bl	8001a38 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(pad->hadc1, 80);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2150      	movs	r1, #80	@ 0x50
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fca7 	bl	8001c42 <HAL_ADC_PollForConversion>
	  result = HAL_ADC_GetValue(pad->hadc1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fd2d 	bl	8001d58 <HAL_ADC_GetValue>
 80012fe:	60f8      	str	r0, [r7, #12]
	  HAL_ADC_Stop(pad->hadc1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fc69 	bl	8001bdc <HAL_ADC_Stop>
	  return result;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <cpyArray>:



void cpyArray(size_t len, uint8_t old[], uint8_t new[])
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; ++i) new[i] = old[i];
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00a      	b.n	800133c <cpyArray+0x28>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	441a      	add	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	440b      	add	r3, r1
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f0      	bhi.n	8001326 <cpyArray+0x12>
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <OpenChannel>:


void OpenChannel(Touchpad* pad, uint32_t channel)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]

	sConfig.Channel = channel;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001372:	2304      	movs	r3, #4
 8001374:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(pad->hadc1, &sConfig) != HAL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f107 0208 	add.w	r2, r7, #8
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fcf7 	bl	8001d74 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <OpenChannel+0x3e>
	{
		Error_Handler();
 800138c:	f000 f965 	bl	800165a <Error_Handler>
	}
}
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800139c:	f000 fa72 	bl	8001884 <HAL_Init>
  SystemClock_Config();
 80013a0:	f000 f80c 	bl	80013bc <SystemClock_Config>
  MX_GPIO_Init();
 80013a4:	f000 f8b2 	bl	800150c <MX_GPIO_Init>
  MX_ADC1_Init();
 80013a8:	f000 f876 	bl	8001498 <MX_ADC1_Init>

  launchTimer(&hadc1);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <main+0x20>)
 80013ae:	f7ff fc9f 	bl	8000cf0 <launchTimer>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000084 	.word	0x20000084

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	@ 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	2234      	movs	r2, #52	@ 0x34
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f818 	bl	8003400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <SystemClock_Config+0xd4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a29      	ldr	r2, [pc, #164]	@ (8001490 <SystemClock_Config+0xd4>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <SystemClock_Config+0xd4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013fc:	2300      	movs	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <SystemClock_Config+0xd8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001408:	4a22      	ldr	r2, [pc, #136]	@ (8001494 <SystemClock_Config+0xd8>)
 800140a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <SystemClock_Config+0xd8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001430:	2310      	movs	r3, #16
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001434:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001438:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800143a:	2304      	movs	r3, #4
 800143c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001442:	2302      	movs	r3, #2
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fc84 	bl	8002d58 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001456:	f000 f900 	bl	800165a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	2102      	movs	r1, #2
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f958 	bl	800272c <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001482:	f000 f8ea 	bl	800165a <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3750      	adds	r7, #80	@ 0x50
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <MX_ADC1_Init+0x68>)
 800149e:	4a19      	ldr	r2, [pc, #100]	@ (8001504 <MX_ADC1_Init+0x6c>)
 80014a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014b6:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <MX_ADC1_Init+0x70>)
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014d8:	2201      	movs	r2, #1
 80014da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_ADC1_Init+0x68>)
 80014ec:	f000 fa60 	bl	80019b0 <HAL_ADC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80014f6:	f000 f8b0 	bl	800165a <Error_Handler>
  }

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000084 	.word	0x20000084
 8001504:	40012000 	.word	0x40012000
 8001508:	0f000001 	.word	0x0f000001

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b36      	ldr	r3, [pc, #216]	@ (8001600 <MX_GPIO_Init+0xf4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a35      	ldr	r2, [pc, #212]	@ (8001600 <MX_GPIO_Init+0xf4>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b33      	ldr	r3, [pc, #204]	@ (8001600 <MX_GPIO_Init+0xf4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <MX_GPIO_Init+0xf4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a2e      	ldr	r2, [pc, #184]	@ (8001600 <MX_GPIO_Init+0xf4>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <MX_GPIO_Init+0xf4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <MX_GPIO_Init+0xf4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <MX_GPIO_Init+0xf4>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <MX_GPIO_Init+0xf4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

	Configure_GPIO_Pins(&GPIO_InitStruct, SEGMENT_A_PIN_TYPE, SEGMENT_A_PIN_NUMBER, OUTPUT);
 8001576:	f107 000c 	add.w	r0, r7, #12
 800157a:	2300      	movs	r3, #0
 800157c:	2201      	movs	r2, #1
 800157e:	4921      	ldr	r1, [pc, #132]	@ (8001604 <MX_GPIO_Init+0xf8>)
 8001580:	f000 f842 	bl	8001608 <Configure_GPIO_Pins>
	Configure_GPIO_Pins(&GPIO_InitStruct, SEGMENT_B_PIN_TYPE, SEGMENT_B_PIN_NUMBER, OUTPUT);
 8001584:	f107 000c 	add.w	r0, r7, #12
 8001588:	2300      	movs	r3, #0
 800158a:	2202      	movs	r2, #2
 800158c:	491d      	ldr	r1, [pc, #116]	@ (8001604 <MX_GPIO_Init+0xf8>)
 800158e:	f000 f83b 	bl	8001608 <Configure_GPIO_Pins>
	Configure_GPIO_Pins(&GPIO_InitStruct, SEGMENT_C_PIN_TYPE, SEGMENT_C_PIN_NUMBER, OUTPUT);
 8001592:	f107 000c 	add.w	r0, r7, #12
 8001596:	2300      	movs	r3, #0
 8001598:	2204      	movs	r2, #4
 800159a:	491a      	ldr	r1, [pc, #104]	@ (8001604 <MX_GPIO_Init+0xf8>)
 800159c:	f000 f834 	bl	8001608 <Configure_GPIO_Pins>
	Configure_GPIO_Pins(&GPIO_InitStruct, SEGMENT_D_PIN_TYPE, SEGMENT_D_PIN_NUMBER, OUTPUT);
 80015a0:	f107 000c 	add.w	r0, r7, #12
 80015a4:	2300      	movs	r3, #0
 80015a6:	2208      	movs	r2, #8
 80015a8:	4916      	ldr	r1, [pc, #88]	@ (8001604 <MX_GPIO_Init+0xf8>)
 80015aa:	f000 f82d 	bl	8001608 <Configure_GPIO_Pins>
	Configure_GPIO_Pins(&GPIO_InitStruct, SEGMENT_E_PIN_TYPE, SEGMENT_E_PIN_NUMBER, OUTPUT);
 80015ae:	f107 000c 	add.w	r0, r7, #12
 80015b2:	2300      	movs	r3, #0
 80015b4:	2210      	movs	r2, #16
 80015b6:	4913      	ldr	r1, [pc, #76]	@ (8001604 <MX_GPIO_Init+0xf8>)
 80015b8:	f000 f826 	bl	8001608 <Configure_GPIO_Pins>
	Configure_GPIO_Pins(&GPIO_InitStruct, SEGMENT_F_PIN_TYPE, SEGMENT_F_PIN_NUMBER, OUTPUT);
 80015bc:	f107 000c 	add.w	r0, r7, #12
 80015c0:	2300      	movs	r3, #0
 80015c2:	2220      	movs	r2, #32
 80015c4:	490f      	ldr	r1, [pc, #60]	@ (8001604 <MX_GPIO_Init+0xf8>)
 80015c6:	f000 f81f 	bl	8001608 <Configure_GPIO_Pins>
	Configure_GPIO_Pins(&GPIO_InitStruct, SEGMENT_G_PIN_TYPE, SEGMENT_G_PIN_NUMBER, OUTPUT);
 80015ca:	f107 000c 	add.w	r0, r7, #12
 80015ce:	2300      	movs	r3, #0
 80015d0:	2240      	movs	r2, #64	@ 0x40
 80015d2:	490c      	ldr	r1, [pc, #48]	@ (8001604 <MX_GPIO_Init+0xf8>)
 80015d4:	f000 f818 	bl	8001608 <Configure_GPIO_Pins>

	Configure_GPIO_Pins(&GPIO_InitStruct, BUZZER_PIN_TYPE, BUZZER_PIN_NUMBER, OUTPUT);
 80015d8:	f107 000c 	add.w	r0, r7, #12
 80015dc:	2300      	movs	r3, #0
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	4908      	ldr	r1, [pc, #32]	@ (8001604 <MX_GPIO_Init+0xf8>)
 80015e2:	f000 f811 	bl	8001608 <Configure_GPIO_Pins>
	Configure_GPIO_Pins(&GPIO_InitStruct, LED_PIN_TYPE, LED_PIN_NUMBER, OUTPUT);
 80015e6:	f107 000c 	add.w	r0, r7, #12
 80015ea:	2300      	movs	r3, #0
 80015ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015f0:	4904      	ldr	r1, [pc, #16]	@ (8001604 <MX_GPIO_Init+0xf8>)
 80015f2:	f000 f809 	bl	8001608 <Configure_GPIO_Pins>



}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020400 	.word	0x40020400

08001608 <Configure_GPIO_Pins>:
 * @param IO Specifies whether the pin is configured as INPUT or
 * OUTPUT (0 for INPUT, 1 for OUTPUT).
 *
 */
static void Configure_GPIO_Pins(GPIO_InitTypeDef* GPIO_InitStruct, GPIO_TypeDef* pinType, uint32_t pinNumber, int IO)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct->Pin = pinNumber;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct->Mode = (IO == INPUT) ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct->Pull = (IO == INPUT) ? GPIO_PULLDOWN : GPIO_NOPULL;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <Configure_GPIO_Pins+0x30>
 8001634:	2202      	movs	r2, #2
 8001636:	e000      	b.n	800163a <Configure_GPIO_Pins+0x32>
 8001638:	2200      	movs	r2, #0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	609a      	str	r2, [r3, #8]
	  if(IO == OUTPUT) GPIO_InitStruct->Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <Configure_GPIO_Pins+0x42>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(pinType, GPIO_InitStruct);
 800164a:	68f9      	ldr	r1, [r7, #12]
 800164c:	68b8      	ldr	r0, [r7, #8]
 800164e:	f000 fea5 	bl	800239c <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165e:	b672      	cpsid	i
}
 8001660:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001662:	bf00      	nop
 8001664:	e7fd      	b.n	8001662 <Error_Handler+0x8>
	...

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f000 fe44 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a17      	ldr	r2, [pc, #92]	@ (8001734 <HAL_ADC_MspInit+0x7c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d127      	bne.n	800172a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	4a15      	ldr	r2, [pc, #84]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001712:	2313      	movs	r3, #19
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_ADC_MspInit+0x84>)
 8001726:	f000 fe39 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012000 	.word	0x40012000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <NMI_Handler+0x4>

08001748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <MemManage_Handler+0x4>

08001758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <UsageFault_Handler+0x4>

08001768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001796:	f000 f8c7 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f001 fe2e 	bl	8003430 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20020000 	.word	0x20020000
 8001800:	00000400 	.word	0x00000400
 8001804:	200000cc 	.word	0x200000cc
 8001808:	20000220 	.word	0x20000220

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001868 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001834:	f7ff ffea 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	@ (8001870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	@ (800187c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800185e:	f001 fded 	bl	800343c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001862:	f7ff fd99 	bl	8001398 <main>
  bx  lr    
 8001866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001874:	0800353c 	.word	0x0800353c
  ldr r2, =_sbss
 8001878:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800187c:	2000021c 	.word	0x2000021c

08001880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC_IRQHandler>
	...

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <HAL_Init+0x40>)
 800188e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <HAL_Init+0x40>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800189e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <HAL_Init+0x40>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 fd41 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f808 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fed6 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fd4b 	bl	8002382 <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f000 fd21 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	@ (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000000 	.word	0x20000000
 8001920:	20000008 	.word	0x20000008
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008
 800194c:	200000d0 	.word	0x200000d0

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200000d0 	.word	0x200000d0

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e033      	b.n	8001a2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fe72 	bl	80016b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019f6:	f023 0302 	bic.w	r3, r3, #2
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fae8 	bl	8001fd8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a1e:	e001      	b.n	8001a24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Start+0x1a>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0b2      	b.n	8001bb8 <HAL_ADC_Start+0x180>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d018      	beq.n	8001a9a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a78:	4b52      	ldr	r3, [pc, #328]	@ (8001bc4 <HAL_ADC_Start+0x18c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	@ (8001bc8 <HAL_ADC_Start+0x190>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f9      	bne.n	8001a8e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d17a      	bne.n	8001b9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ad2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae6:	d106      	bne.n	8001af6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aec:	f023 0206 	bic.w	r2, r3, #6
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001af4:	e002      	b.n	8001afc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b04:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_ADC_Start+0x194>)
 8001b06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12a      	bne.n	8001b74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd0 <HAL_ADC_Start+0x198>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d015      	beq.n	8001b54 <HAL_ADC_Start+0x11c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a29      	ldr	r2, [pc, #164]	@ (8001bd4 <HAL_ADC_Start+0x19c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_Start+0x106>
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <HAL_ADC_Start+0x194>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a25      	ldr	r2, [pc, #148]	@ (8001bd8 <HAL_ADC_Start+0x1a0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d136      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
 8001b48:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_ADC_Start+0x194>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d130      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d129      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	e020      	b.n	8001bb6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a15      	ldr	r2, [pc, #84]	@ (8001bd0 <HAL_ADC_Start+0x198>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d114      	bne.n	8001bb6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f043 0210 	orr.w	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	431bde83 	.word	0x431bde83
 8001bcc:	40012300 	.word	0x40012300
 8001bd0:	40012000 	.word	0x40012000
 8001bd4:	40012100 	.word	0x40012100
 8001bd8:	40012200 	.word	0x40012200

08001bdc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Stop+0x16>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e021      	b.n	8001c36 <HAL_ADC_Stop+0x5a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5e:	d113      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e063      	b.n	8001d50 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c88:	f7ff fe62 	bl	8001950 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c8e:	e021      	b.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c96:	d01d      	beq.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_ADC_PollForConversion+0x6c>
 8001c9e:	f7ff fe57 	bl	8001950 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d212      	bcs.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d00b      	beq.n	8001cd4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e03d      	b.n	8001d50 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d1d6      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0212 	mvn.w	r2, #18
 8001cea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d123      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11f      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x1c>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e113      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x244>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d925      	bls.n	8001dec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68d9      	ldr	r1, [r3, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3b1e      	subs	r3, #30
 8001db6:	2207      	movs	r2, #7
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68d9      	ldr	r1, [r3, #12]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4603      	mov	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4403      	add	r3, r0
 8001dde:	3b1e      	subs	r3, #30
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	e022      	b.n	8001e32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6919      	ldr	r1, [r3, #16]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	2207      	movs	r2, #7
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	4603      	mov	r3, r0
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4403      	add	r3, r0
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d824      	bhi.n	8001e84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b05      	subs	r3, #5
 8001e4c:	221f      	movs	r2, #31
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	3b05      	subs	r3, #5
 8001e76:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e82:	e04c      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d824      	bhi.n	8001ed6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b23      	subs	r3, #35	@ 0x23
 8001e9e:	221f      	movs	r2, #31
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	400a      	ands	r2, r1
 8001eac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b23      	subs	r3, #35	@ 0x23
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ed4:	e023      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b41      	subs	r3, #65	@ 0x41
 8001ee8:	221f      	movs	r2, #31
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b41      	subs	r3, #65	@ 0x41
 8001f12:	fa00 f203 	lsl.w	r2, r0, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1e:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <HAL_ADC_ConfigChannel+0x250>)
 8001f20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a28      	ldr	r2, [pc, #160]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x254>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d10f      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1d8>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b12      	cmp	r3, #18
 8001f32:	d10b      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x254>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d12b      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x23a>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fcc <HAL_ADC_ConfigChannel+0x258>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <HAL_ADC_ConfigChannel+0x1f4>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b11      	cmp	r3, #17
 8001f66:	d122      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a11      	ldr	r2, [pc, #68]	@ (8001fcc <HAL_ADC_ConfigChannel+0x258>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d111      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x25c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x260>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9a      	lsrs	r2, r3, #18
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40012300 	.word	0x40012300
 8001fc8:	40012000 	.word	0x40012000
 8001fcc:	10000012 	.word	0x10000012
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe0:	4b79      	ldr	r3, [pc, #484]	@ (80021c8 <ADC_Init+0x1f0>)
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800200c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	021a      	lsls	r2, r3, #8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	4a58      	ldr	r2, [pc, #352]	@ (80021cc <ADC_Init+0x1f4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d022      	beq.n	80020b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800207e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6899      	ldr	r1, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	e00f      	b.n	80020d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0202 	bic.w	r2, r2, #2
 80020e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6899      	ldr	r1, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7e1b      	ldrb	r3, [r3, #24]
 80020f0:	005a      	lsls	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002112:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002122:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6859      	ldr	r1, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	3b01      	subs	r3, #1
 8002130:	035a      	lsls	r2, r3, #13
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	e007      	b.n	800214c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	3b01      	subs	r3, #1
 8002168:	051a      	lsls	r2, r3, #20
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800218e:	025a      	lsls	r2, r3, #9
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	029a      	lsls	r2, r3, #10
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40012300 	.word	0x40012300
 80021cc:	0f000001 	.word	0x0f000001

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	@ (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff47 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff5c 	bl	8002218 <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffb0 	bl	80022f0 <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e165      	b.n	8002684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 8154 	bne.w	800267e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d005      	beq.n	80023ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d130      	bne.n	8002450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 0201 	and.w	r2, r3, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b03      	cmp	r3, #3
 800245a:	d017      	beq.n	800248c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d123      	bne.n	80024e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3208      	adds	r2, #8
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0203 	and.w	r2, r3, #3
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80ae 	beq.w	800267e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b5d      	ldr	r3, [pc, #372]	@ (800269c <HAL_GPIO_Init+0x300>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	4a5c      	ldr	r2, [pc, #368]	@ (800269c <HAL_GPIO_Init+0x300>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002530:	6453      	str	r3, [r2, #68]	@ 0x44
 8002532:	4b5a      	ldr	r3, [pc, #360]	@ (800269c <HAL_GPIO_Init+0x300>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253e:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4f      	ldr	r2, [pc, #316]	@ (80026a4 <HAL_GPIO_Init+0x308>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d025      	beq.n	80025b6 <HAL_GPIO_Init+0x21a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4e      	ldr	r2, [pc, #312]	@ (80026a8 <HAL_GPIO_Init+0x30c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01f      	beq.n	80025b2 <HAL_GPIO_Init+0x216>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4d      	ldr	r2, [pc, #308]	@ (80026ac <HAL_GPIO_Init+0x310>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <HAL_GPIO_Init+0x212>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4c      	ldr	r2, [pc, #304]	@ (80026b0 <HAL_GPIO_Init+0x314>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0x20e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4b      	ldr	r2, [pc, #300]	@ (80026b4 <HAL_GPIO_Init+0x318>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00d      	beq.n	80025a6 <HAL_GPIO_Init+0x20a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4a      	ldr	r2, [pc, #296]	@ (80026b8 <HAL_GPIO_Init+0x31c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <HAL_GPIO_Init+0x206>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a49      	ldr	r2, [pc, #292]	@ (80026bc <HAL_GPIO_Init+0x320>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_GPIO_Init+0x202>
 800259a:	2306      	movs	r3, #6
 800259c:	e00c      	b.n	80025b8 <HAL_GPIO_Init+0x21c>
 800259e:	2307      	movs	r3, #7
 80025a0:	e00a      	b.n	80025b8 <HAL_GPIO_Init+0x21c>
 80025a2:	2305      	movs	r3, #5
 80025a4:	e008      	b.n	80025b8 <HAL_GPIO_Init+0x21c>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e006      	b.n	80025b8 <HAL_GPIO_Init+0x21c>
 80025aa:	2303      	movs	r3, #3
 80025ac:	e004      	b.n	80025b8 <HAL_GPIO_Init+0x21c>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_Init+0x21c>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_GPIO_Init+0x21c>
 80025b6:	2300      	movs	r3, #0
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	f002 0203 	and.w	r2, r2, #3
 80025be:	0092      	lsls	r2, r2, #2
 80025c0:	4093      	lsls	r3, r2
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c8:	4935      	ldr	r1, [pc, #212]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3302      	adds	r3, #2
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d6:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fa:	4a31      	ldr	r2, [pc, #196]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002600:	4b2f      	ldr	r3, [pc, #188]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002624:	4a26      	ldr	r2, [pc, #152]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262a:	4b25      	ldr	r3, [pc, #148]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800264e:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002654:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002678:	4a11      	ldr	r2, [pc, #68]	@ (80026c0 <HAL_GPIO_Init+0x324>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b0f      	cmp	r3, #15
 8002688:	f67f ae96 	bls.w	80023b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3724      	adds	r7, #36	@ 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40013800 	.word	0x40013800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40021400 	.word	0x40021400
 80026bc:	40021800 	.word	0x40021800
 80026c0:	40013c00 	.word	0x40013c00

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002708:	887a      	ldrh	r2, [r7, #2]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4013      	ands	r3, r2
 800270e:	041a      	lsls	r2, r3, #16
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43d9      	mvns	r1, r3
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	400b      	ands	r3, r1
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0cc      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b68      	ldr	r3, [pc, #416]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d90c      	bls.n	8002768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b65      	ldr	r3, [pc, #404]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b63      	ldr	r3, [pc, #396]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b8      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b59      	ldr	r3, [pc, #356]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a58      	ldr	r2, [pc, #352]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800278a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b53      	ldr	r3, [pc, #332]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a52      	ldr	r2, [pc, #328]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b50      	ldr	r3, [pc, #320]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494d      	ldr	r1, [pc, #308]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d044      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d119      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3b      	ldr	r3, [pc, #236]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e067      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4934      	ldr	r1, [pc, #208]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7ff f898 	bl	8001950 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7ff f894 	bl	8001950 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e04f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2b      	ldr	r3, [pc, #172]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d20c      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b22      	ldr	r3, [pc, #136]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b20      	ldr	r3, [pc, #128]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e032      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4916      	ldr	r1, [pc, #88]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	490e      	ldr	r1, [pc, #56]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b2:	f000 f821 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	490a      	ldr	r1, [pc, #40]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	5ccb      	ldrb	r3, [r1, r3]
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fff8 	bl	80018c8 <HAL_InitTick>

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023c00 	.word	0x40023c00
 80028e8:	40023800 	.word	0x40023800
 80028ec:	0800351c 	.word	0x0800351c
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028fc:	b0ae      	sub	sp, #184	@ 0xb8
 80028fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291e:	4bcb      	ldr	r3, [pc, #812]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b0c      	cmp	r3, #12
 8002928:	f200 8206 	bhi.w	8002d38 <HAL_RCC_GetSysClockFreq+0x440>
 800292c:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <HAL_RCC_GetSysClockFreq+0x3c>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002969 	.word	0x08002969
 8002938:	08002d39 	.word	0x08002d39
 800293c:	08002d39 	.word	0x08002d39
 8002940:	08002d39 	.word	0x08002d39
 8002944:	08002971 	.word	0x08002971
 8002948:	08002d39 	.word	0x08002d39
 800294c:	08002d39 	.word	0x08002d39
 8002950:	08002d39 	.word	0x08002d39
 8002954:	08002979 	.word	0x08002979
 8002958:	08002d39 	.word	0x08002d39
 800295c:	08002d39 	.word	0x08002d39
 8002960:	08002d39 	.word	0x08002d39
 8002964:	08002b69 	.word	0x08002b69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4bb9      	ldr	r3, [pc, #740]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x358>)
 800296a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800296e:	e1e7      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002970:	4bb8      	ldr	r3, [pc, #736]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002976:	e1e3      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002978:	4bb4      	ldr	r3, [pc, #720]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002984:	4bb1      	ldr	r3, [pc, #708]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d071      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	4bae      	ldr	r3, [pc, #696]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800299c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80029a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029b6:	4622      	mov	r2, r4
 80029b8:	462b      	mov	r3, r5
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	0159      	lsls	r1, r3, #5
 80029c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c8:	0150      	lsls	r0, r2, #5
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4621      	mov	r1, r4
 80029d0:	1a51      	subs	r1, r2, r1
 80029d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80029d4:	4629      	mov	r1, r5
 80029d6:	eb63 0301 	sbc.w	r3, r3, r1
 80029da:	647b      	str	r3, [r7, #68]	@ 0x44
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80029e8:	4649      	mov	r1, r9
 80029ea:	018b      	lsls	r3, r1, #6
 80029ec:	4641      	mov	r1, r8
 80029ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f2:	4641      	mov	r1, r8
 80029f4:	018a      	lsls	r2, r1, #6
 80029f6:	4641      	mov	r1, r8
 80029f8:	1a51      	subs	r1, r2, r1
 80029fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029fc:	4649      	mov	r1, r9
 80029fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002a10:	4649      	mov	r1, r9
 8002a12:	00cb      	lsls	r3, r1, #3
 8002a14:	4641      	mov	r1, r8
 8002a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a1a:	4641      	mov	r1, r8
 8002a1c:	00ca      	lsls	r2, r1, #3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	4622      	mov	r2, r4
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a2a:	462b      	mov	r3, r5
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	eb42 0303 	adc.w	r3, r2, r3
 8002a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a40:	4629      	mov	r1, r5
 8002a42:	024b      	lsls	r3, r1, #9
 8002a44:	4621      	mov	r1, r4
 8002a46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	024a      	lsls	r2, r1, #9
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a64:	f7fd ffcc 	bl	8000a00 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a72:	e067      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a74:	4b75      	ldr	r3, [pc, #468]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a80:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a8e:	2300      	movs	r3, #0
 8002a90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002a96:	4622      	mov	r2, r4
 8002a98:	462b      	mov	r3, r5
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0159      	lsls	r1, r3, #5
 8002aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa8:	0150      	lsls	r0, r2, #5
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4621      	mov	r1, r4
 8002ab0:	1a51      	subs	r1, r2, r1
 8002ab2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ac8:	4649      	mov	r1, r9
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	4641      	mov	r1, r8
 8002ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ad2:	4641      	mov	r1, r8
 8002ad4:	018a      	lsls	r2, r1, #6
 8002ad6:	4641      	mov	r1, r8
 8002ad8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002adc:	4649      	mov	r1, r9
 8002ade:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002af2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af6:	4692      	mov	sl, r2
 8002af8:	469b      	mov	fp, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	eb1a 0303 	adds.w	r3, sl, r3
 8002b00:	623b      	str	r3, [r7, #32]
 8002b02:	462b      	mov	r3, r5
 8002b04:	eb4b 0303 	adc.w	r3, fp, r3
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b16:	4629      	mov	r1, r5
 8002b18:	028b      	lsls	r3, r1, #10
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b20:	4621      	mov	r1, r4
 8002b22:	028a      	lsls	r2, r1, #10
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b30:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b36:	f7fd ff63 	bl	8000a00 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4613      	mov	r3, r2
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b44:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b66:	e0eb      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b68:	4b38      	ldr	r3, [pc, #224]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b74:	4b35      	ldr	r3, [pc, #212]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d06b      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b80:	4b32      	ldr	r3, [pc, #200]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	2200      	movs	r2, #0
 8002b88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b92:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b94:	2300      	movs	r3, #0
 8002b96:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b9c:	4622      	mov	r2, r4
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	f04f 0000 	mov.w	r0, #0
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	0159      	lsls	r1, r3, #5
 8002baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bae:	0150      	lsls	r0, r2, #5
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	1a51      	subs	r1, r2, r1
 8002bb8:	61b9      	str	r1, [r7, #24]
 8002bba:	4629      	mov	r1, r5
 8002bbc:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bce:	4659      	mov	r1, fp
 8002bd0:	018b      	lsls	r3, r1, #6
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bd8:	4651      	mov	r1, sl
 8002bda:	018a      	lsls	r2, r1, #6
 8002bdc:	4651      	mov	r1, sl
 8002bde:	ebb2 0801 	subs.w	r8, r2, r1
 8002be2:	4659      	mov	r1, fp
 8002be4:	eb63 0901 	sbc.w	r9, r3, r1
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bfc:	4690      	mov	r8, r2
 8002bfe:	4699      	mov	r9, r3
 8002c00:	4623      	mov	r3, r4
 8002c02:	eb18 0303 	adds.w	r3, r8, r3
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	462b      	mov	r3, r5
 8002c0a:	eb49 0303 	adc.w	r3, r9, r3
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	024b      	lsls	r3, r1, #9
 8002c20:	4621      	mov	r1, r4
 8002c22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c26:	4621      	mov	r1, r4
 8002c28:	024a      	lsls	r2, r1, #9
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c32:	2200      	movs	r2, #0
 8002c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c36:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c3c:	f7fd fee0 	bl	8000a00 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4613      	mov	r3, r2
 8002c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c4a:	e065      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x420>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c58:	4b3d      	ldr	r3, [pc, #244]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	4611      	mov	r1, r2
 8002c64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c68:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002c72:	4642      	mov	r2, r8
 8002c74:	464b      	mov	r3, r9
 8002c76:	f04f 0000 	mov.w	r0, #0
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	0159      	lsls	r1, r3, #5
 8002c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c84:	0150      	lsls	r0, r2, #5
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4641      	mov	r1, r8
 8002c8c:	1a51      	subs	r1, r2, r1
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	4649      	mov	r1, r9
 8002c92:	eb63 0301 	sbc.w	r3, r3, r1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	018b      	lsls	r3, r1, #6
 8002ca8:	4651      	mov	r1, sl
 8002caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cae:	4651      	mov	r1, sl
 8002cb0:	018a      	lsls	r2, r1, #6
 8002cb2:	4651      	mov	r1, sl
 8002cb4:	1a54      	subs	r4, r2, r1
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	eb63 0501 	sbc.w	r5, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	00eb      	lsls	r3, r5, #3
 8002cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cca:	00e2      	lsls	r2, r4, #3
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	18e3      	adds	r3, r4, r3
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	eb45 0303 	adc.w	r3, r5, r3
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cea:	4629      	mov	r1, r5
 8002cec:	028b      	lsls	r3, r1, #10
 8002cee:	4621      	mov	r1, r4
 8002cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	028a      	lsls	r2, r1, #10
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d00:	2200      	movs	r2, #0
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d04:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d0a:	f7fd fe79 	bl	8000a00 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4613      	mov	r3, r2
 8002d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d18:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	0f1b      	lsrs	r3, r3, #28
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d36:	e003      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	37b8      	adds	r7, #184	@ 0xb8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	00f42400 	.word	0x00f42400

08002d58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e28d      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8083 	beq.w	8002e7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d78:	4b94      	ldr	r3, [pc, #592]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d019      	beq.n	8002db8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d84:	4b91      	ldr	r3, [pc, #580]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d90:	4b8e      	ldr	r3, [pc, #568]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9c:	d00c      	beq.n	8002db8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9e:	4b8b      	ldr	r3, [pc, #556]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d112      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002daa:	4b88      	ldr	r3, [pc, #544]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db6:	d10b      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	4b84      	ldr	r3, [pc, #528]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d05b      	beq.n	8002e7c <HAL_RCC_OscConfig+0x124>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d157      	bne.n	8002e7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e25a      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x90>
 8002dda:	4b7c      	ldr	r3, [pc, #496]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7b      	ldr	r2, [pc, #492]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0xcc>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0xb4>
 8002df2:	4b76      	ldr	r3, [pc, #472]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a75      	ldr	r2, [pc, #468]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b73      	ldr	r3, [pc, #460]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a72      	ldr	r2, [pc, #456]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xcc>
 8002e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6e      	ldr	r2, [pc, #440]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b6c      	ldr	r3, [pc, #432]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fd90 	bl	8001950 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fd8c 	bl	8001950 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	@ 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e21f      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b61      	ldr	r3, [pc, #388]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xdc>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fd7c 	bl	8001950 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fd78 	bl	8001950 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	@ 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e20b      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	4b57      	ldr	r3, [pc, #348]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x104>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d06f      	beq.n	8002f6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e8a:	4b50      	ldr	r3, [pc, #320]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d017      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e96:	4b4d      	ldr	r3, [pc, #308]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eae:	4b47      	ldr	r3, [pc, #284]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d11c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eba:	4b44      	ldr	r3, [pc, #272]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d116      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	4b41      	ldr	r3, [pc, #260]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_RCC_OscConfig+0x186>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e1d3      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ede:	4b3b      	ldr	r3, [pc, #236]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4937      	ldr	r1, [pc, #220]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	e03a      	b.n	8002f6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efc:	4b34      	ldr	r3, [pc, #208]	@ (8002fd0 <HAL_RCC_OscConfig+0x278>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7fe fd25 	bl	8001950 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fd21 	bl	8001950 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e1b4      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4925      	ldr	r1, [pc, #148]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	e015      	b.n	8002f6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3e:	4b24      	ldr	r3, [pc, #144]	@ (8002fd0 <HAL_RCC_OscConfig+0x278>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fd04 	bl	8001950 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4c:	f7fe fd00 	bl	8001950 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e193      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d036      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d016      	beq.n	8002fac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7e:	4b15      	ldr	r3, [pc, #84]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe fce4 	bl	8001950 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fce0 	bl	8001950 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e173      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x234>
 8002faa:	e01b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fe fccd 	bl	8001950 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	e00e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fba:	f7fe fcc9 	bl	8001950 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d907      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e15c      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	42470000 	.word	0x42470000
 8002fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b8a      	ldr	r3, [pc, #552]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8002fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ea      	bne.n	8002fba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8097 	beq.w	8003120 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4b83      	ldr	r3, [pc, #524]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10f      	bne.n	8003022 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	4b7f      	ldr	r3, [pc, #508]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	4a7e      	ldr	r2, [pc, #504]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	@ 0x40
 8003012:	4b7c      	ldr	r3, [pc, #496]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b79      	ldr	r3, [pc, #484]	@ (8003208 <HAL_RCC_OscConfig+0x4b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b76      	ldr	r3, [pc, #472]	@ (8003208 <HAL_RCC_OscConfig+0x4b0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	@ (8003208 <HAL_RCC_OscConfig+0x4b0>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe fc89 	bl	8001950 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fe fc85 	bl	8001950 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e118      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	4b6c      	ldr	r3, [pc, #432]	@ (8003208 <HAL_RCC_OscConfig+0x4b0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x31e>
 8003068:	4b66      	ldr	r3, [pc, #408]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	4a65      	ldr	r2, [pc, #404]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	@ 0x70
 8003074:	e01c      	b.n	80030b0 <HAL_RCC_OscConfig+0x358>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x340>
 800307e:	4b61      	ldr	r3, [pc, #388]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	4a60      	ldr	r2, [pc, #384]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6713      	str	r3, [r2, #112]	@ 0x70
 800308a:	4b5e      	ldr	r3, [pc, #376]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	4a5d      	ldr	r2, [pc, #372]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	@ 0x70
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0x358>
 8003098:	4b5a      	ldr	r3, [pc, #360]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	4a59      	ldr	r2, [pc, #356]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a4:	4b57      	ldr	r3, [pc, #348]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	4a56      	ldr	r2, [pc, #344]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe fc4a 	bl	8001950 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe fc46 	bl	8001950 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0d7      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ee      	beq.n	80030c0 <HAL_RCC_OscConfig+0x368>
 80030e2:	e014      	b.n	800310e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe fc34 	bl	8001950 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe fc30 	bl	8001950 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0c1      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003102:	4b40      	ldr	r3, [pc, #256]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ee      	bne.n	80030ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003114:	4b3b      	ldr	r3, [pc, #236]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	4a3a      	ldr	r2, [pc, #232]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 800311a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800311e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80ad 	beq.w	8003284 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800312a:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b08      	cmp	r3, #8
 8003134:	d060      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d145      	bne.n	80031ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b33      	ldr	r3, [pc, #204]	@ (800320c <HAL_RCC_OscConfig+0x4b4>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fc04 	bl	8001950 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fc00 	bl	8001950 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e093      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b29      	ldr	r3, [pc, #164]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	019b      	lsls	r3, r3, #6
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	3b01      	subs	r3, #1
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	491b      	ldr	r1, [pc, #108]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319c:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <HAL_RCC_OscConfig+0x4b4>)
 800319e:	2201      	movs	r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe fbd5 	bl	8001950 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fe fbd1 	bl	8001950 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e064      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x452>
 80031c8:	e05c      	b.n	8003284 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <HAL_RCC_OscConfig+0x4b4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fbbe 	bl	8001950 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe fbba 	bl	8001950 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e04d      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCC_OscConfig+0x4ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x480>
 80031f6:	e045      	b.n	8003284 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e040      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
 8003204:	40023800 	.word	0x40023800
 8003208:	40007000 	.word	0x40007000
 800320c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003210:	4b1f      	ldr	r3, [pc, #124]	@ (8003290 <HAL_RCC_OscConfig+0x538>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d030      	beq.n	8003280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d129      	bne.n	8003280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d122      	bne.n	8003280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003248:	4293      	cmp	r3, r2
 800324a:	d119      	bne.n	8003280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	3b01      	subs	r3, #1
 800325a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d10f      	bne.n	8003280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d107      	bne.n	8003280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <malloc>:
 8003294:	4b02      	ldr	r3, [pc, #8]	@ (80032a0 <malloc+0xc>)
 8003296:	4601      	mov	r1, r0
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	f000 b825 	b.w	80032e8 <_malloc_r>
 800329e:	bf00      	nop
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <sbrk_aligned>:
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	4e0f      	ldr	r6, [pc, #60]	@ (80032e4 <sbrk_aligned+0x40>)
 80032a8:	460c      	mov	r4, r1
 80032aa:	6831      	ldr	r1, [r6, #0]
 80032ac:	4605      	mov	r5, r0
 80032ae:	b911      	cbnz	r1, 80032b6 <sbrk_aligned+0x12>
 80032b0:	f000 f8ae 	bl	8003410 <_sbrk_r>
 80032b4:	6030      	str	r0, [r6, #0]
 80032b6:	4621      	mov	r1, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	f000 f8a9 	bl	8003410 <_sbrk_r>
 80032be:	1c43      	adds	r3, r0, #1
 80032c0:	d103      	bne.n	80032ca <sbrk_aligned+0x26>
 80032c2:	f04f 34ff 	mov.w	r4, #4294967295
 80032c6:	4620      	mov	r0, r4
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	1cc4      	adds	r4, r0, #3
 80032cc:	f024 0403 	bic.w	r4, r4, #3
 80032d0:	42a0      	cmp	r0, r4
 80032d2:	d0f8      	beq.n	80032c6 <sbrk_aligned+0x22>
 80032d4:	1a21      	subs	r1, r4, r0
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 f89a 	bl	8003410 <_sbrk_r>
 80032dc:	3001      	adds	r0, #1
 80032de:	d1f2      	bne.n	80032c6 <sbrk_aligned+0x22>
 80032e0:	e7ef      	b.n	80032c2 <sbrk_aligned+0x1e>
 80032e2:	bf00      	nop
 80032e4:	200000d4 	.word	0x200000d4

080032e8 <_malloc_r>:
 80032e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032ec:	1ccd      	adds	r5, r1, #3
 80032ee:	f025 0503 	bic.w	r5, r5, #3
 80032f2:	3508      	adds	r5, #8
 80032f4:	2d0c      	cmp	r5, #12
 80032f6:	bf38      	it	cc
 80032f8:	250c      	movcc	r5, #12
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	4606      	mov	r6, r0
 80032fe:	db01      	blt.n	8003304 <_malloc_r+0x1c>
 8003300:	42a9      	cmp	r1, r5
 8003302:	d904      	bls.n	800330e <_malloc_r+0x26>
 8003304:	230c      	movs	r3, #12
 8003306:	6033      	str	r3, [r6, #0]
 8003308:	2000      	movs	r0, #0
 800330a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800330e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033e4 <_malloc_r+0xfc>
 8003312:	f000 f869 	bl	80033e8 <__malloc_lock>
 8003316:	f8d8 3000 	ldr.w	r3, [r8]
 800331a:	461c      	mov	r4, r3
 800331c:	bb44      	cbnz	r4, 8003370 <_malloc_r+0x88>
 800331e:	4629      	mov	r1, r5
 8003320:	4630      	mov	r0, r6
 8003322:	f7ff ffbf 	bl	80032a4 <sbrk_aligned>
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	4604      	mov	r4, r0
 800332a:	d158      	bne.n	80033de <_malloc_r+0xf6>
 800332c:	f8d8 4000 	ldr.w	r4, [r8]
 8003330:	4627      	mov	r7, r4
 8003332:	2f00      	cmp	r7, #0
 8003334:	d143      	bne.n	80033be <_malloc_r+0xd6>
 8003336:	2c00      	cmp	r4, #0
 8003338:	d04b      	beq.n	80033d2 <_malloc_r+0xea>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	4639      	mov	r1, r7
 800333e:	4630      	mov	r0, r6
 8003340:	eb04 0903 	add.w	r9, r4, r3
 8003344:	f000 f864 	bl	8003410 <_sbrk_r>
 8003348:	4581      	cmp	r9, r0
 800334a:	d142      	bne.n	80033d2 <_malloc_r+0xea>
 800334c:	6821      	ldr	r1, [r4, #0]
 800334e:	1a6d      	subs	r5, r5, r1
 8003350:	4629      	mov	r1, r5
 8003352:	4630      	mov	r0, r6
 8003354:	f7ff ffa6 	bl	80032a4 <sbrk_aligned>
 8003358:	3001      	adds	r0, #1
 800335a:	d03a      	beq.n	80033d2 <_malloc_r+0xea>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	442b      	add	r3, r5
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	f8d8 3000 	ldr.w	r3, [r8]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	bb62      	cbnz	r2, 80033c4 <_malloc_r+0xdc>
 800336a:	f8c8 7000 	str.w	r7, [r8]
 800336e:	e00f      	b.n	8003390 <_malloc_r+0xa8>
 8003370:	6822      	ldr	r2, [r4, #0]
 8003372:	1b52      	subs	r2, r2, r5
 8003374:	d420      	bmi.n	80033b8 <_malloc_r+0xd0>
 8003376:	2a0b      	cmp	r2, #11
 8003378:	d917      	bls.n	80033aa <_malloc_r+0xc2>
 800337a:	1961      	adds	r1, r4, r5
 800337c:	42a3      	cmp	r3, r4
 800337e:	6025      	str	r5, [r4, #0]
 8003380:	bf18      	it	ne
 8003382:	6059      	strne	r1, [r3, #4]
 8003384:	6863      	ldr	r3, [r4, #4]
 8003386:	bf08      	it	eq
 8003388:	f8c8 1000 	streq.w	r1, [r8]
 800338c:	5162      	str	r2, [r4, r5]
 800338e:	604b      	str	r3, [r1, #4]
 8003390:	4630      	mov	r0, r6
 8003392:	f000 f82f 	bl	80033f4 <__malloc_unlock>
 8003396:	f104 000b 	add.w	r0, r4, #11
 800339a:	1d23      	adds	r3, r4, #4
 800339c:	f020 0007 	bic.w	r0, r0, #7
 80033a0:	1ac2      	subs	r2, r0, r3
 80033a2:	bf1c      	itt	ne
 80033a4:	1a1b      	subne	r3, r3, r0
 80033a6:	50a3      	strne	r3, [r4, r2]
 80033a8:	e7af      	b.n	800330a <_malloc_r+0x22>
 80033aa:	6862      	ldr	r2, [r4, #4]
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	bf0c      	ite	eq
 80033b0:	f8c8 2000 	streq.w	r2, [r8]
 80033b4:	605a      	strne	r2, [r3, #4]
 80033b6:	e7eb      	b.n	8003390 <_malloc_r+0xa8>
 80033b8:	4623      	mov	r3, r4
 80033ba:	6864      	ldr	r4, [r4, #4]
 80033bc:	e7ae      	b.n	800331c <_malloc_r+0x34>
 80033be:	463c      	mov	r4, r7
 80033c0:	687f      	ldr	r7, [r7, #4]
 80033c2:	e7b6      	b.n	8003332 <_malloc_r+0x4a>
 80033c4:	461a      	mov	r2, r3
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	d1fb      	bne.n	80033c4 <_malloc_r+0xdc>
 80033cc:	2300      	movs	r3, #0
 80033ce:	6053      	str	r3, [r2, #4]
 80033d0:	e7de      	b.n	8003390 <_malloc_r+0xa8>
 80033d2:	230c      	movs	r3, #12
 80033d4:	6033      	str	r3, [r6, #0]
 80033d6:	4630      	mov	r0, r6
 80033d8:	f000 f80c 	bl	80033f4 <__malloc_unlock>
 80033dc:	e794      	b.n	8003308 <_malloc_r+0x20>
 80033de:	6005      	str	r5, [r0, #0]
 80033e0:	e7d6      	b.n	8003390 <_malloc_r+0xa8>
 80033e2:	bf00      	nop
 80033e4:	200000d8 	.word	0x200000d8

080033e8 <__malloc_lock>:
 80033e8:	4801      	ldr	r0, [pc, #4]	@ (80033f0 <__malloc_lock+0x8>)
 80033ea:	f000 b84b 	b.w	8003484 <__retarget_lock_acquire_recursive>
 80033ee:	bf00      	nop
 80033f0:	20000218 	.word	0x20000218

080033f4 <__malloc_unlock>:
 80033f4:	4801      	ldr	r0, [pc, #4]	@ (80033fc <__malloc_unlock+0x8>)
 80033f6:	f000 b846 	b.w	8003486 <__retarget_lock_release_recursive>
 80033fa:	bf00      	nop
 80033fc:	20000218 	.word	0x20000218

08003400 <memset>:
 8003400:	4402      	add	r2, r0
 8003402:	4603      	mov	r3, r0
 8003404:	4293      	cmp	r3, r2
 8003406:	d100      	bne.n	800340a <memset+0xa>
 8003408:	4770      	bx	lr
 800340a:	f803 1b01 	strb.w	r1, [r3], #1
 800340e:	e7f9      	b.n	8003404 <memset+0x4>

08003410 <_sbrk_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4d06      	ldr	r5, [pc, #24]	@ (800342c <_sbrk_r+0x1c>)
 8003414:	2300      	movs	r3, #0
 8003416:	4604      	mov	r4, r0
 8003418:	4608      	mov	r0, r1
 800341a:	602b      	str	r3, [r5, #0]
 800341c:	f7fe f9c0 	bl	80017a0 <_sbrk>
 8003420:	1c43      	adds	r3, r0, #1
 8003422:	d102      	bne.n	800342a <_sbrk_r+0x1a>
 8003424:	682b      	ldr	r3, [r5, #0]
 8003426:	b103      	cbz	r3, 800342a <_sbrk_r+0x1a>
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	bd38      	pop	{r3, r4, r5, pc}
 800342c:	20000214 	.word	0x20000214

08003430 <__errno>:
 8003430:	4b01      	ldr	r3, [pc, #4]	@ (8003438 <__errno+0x8>)
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	2000000c 	.word	0x2000000c

0800343c <__libc_init_array>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4d0d      	ldr	r5, [pc, #52]	@ (8003474 <__libc_init_array+0x38>)
 8003440:	4c0d      	ldr	r4, [pc, #52]	@ (8003478 <__libc_init_array+0x3c>)
 8003442:	1b64      	subs	r4, r4, r5
 8003444:	10a4      	asrs	r4, r4, #2
 8003446:	2600      	movs	r6, #0
 8003448:	42a6      	cmp	r6, r4
 800344a:	d109      	bne.n	8003460 <__libc_init_array+0x24>
 800344c:	4d0b      	ldr	r5, [pc, #44]	@ (800347c <__libc_init_array+0x40>)
 800344e:	4c0c      	ldr	r4, [pc, #48]	@ (8003480 <__libc_init_array+0x44>)
 8003450:	f000 f81a 	bl	8003488 <_init>
 8003454:	1b64      	subs	r4, r4, r5
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	2600      	movs	r6, #0
 800345a:	42a6      	cmp	r6, r4
 800345c:	d105      	bne.n	800346a <__libc_init_array+0x2e>
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	f855 3b04 	ldr.w	r3, [r5], #4
 8003464:	4798      	blx	r3
 8003466:	3601      	adds	r6, #1
 8003468:	e7ee      	b.n	8003448 <__libc_init_array+0xc>
 800346a:	f855 3b04 	ldr.w	r3, [r5], #4
 800346e:	4798      	blx	r3
 8003470:	3601      	adds	r6, #1
 8003472:	e7f2      	b.n	800345a <__libc_init_array+0x1e>
 8003474:	08003534 	.word	0x08003534
 8003478:	08003534 	.word	0x08003534
 800347c:	08003534 	.word	0x08003534
 8003480:	08003538 	.word	0x08003538

08003484 <__retarget_lock_acquire_recursive>:
 8003484:	4770      	bx	lr

08003486 <__retarget_lock_release_recursive>:
 8003486:	4770      	bx	lr

08003488 <_init>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr

08003494 <_fini>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr
